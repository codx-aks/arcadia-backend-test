{
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for Arcadia Backend",
        "title": "Arcadia API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "paths": {
        "/": {
            "get": {
                "description": "Checks if the server is up and running",
                "tags": [
                    "General"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.LootboxOpenPOSTResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/constants": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all Constants",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all Constants",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.ConstantsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a constant",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update a constant",
                "parameters": [
                    {
                        "enum": [
                            "minicons_in_lineup",
                            "matchmaking_rank_range",
                            "min_trophy_gain",
                            "trophy_gain_range",
                            "trophy_diff_loser",
                            "survivor_trophy_range",
                            "default_trophy_count",
                            "successive_duplicate_match_limit",
                            "daily_attack_limit",
                            "incr_xp_minicon",
                            "incr_xp_user",
                            "xp_level_multiplier",
                            "xp_base_count",
                            "level_up_stat_multiplier_numerator",
                            "level_up_stat_multiplier_denominator",
                            "is_arena_open",
                            "max_minicon_level",
                            "max_unlocked_minicons",
                            "type_multiplier_numerator",
                            "type_multiplier_denominator"
                        ],
                        "type": "string",
                        "description": "Name of the constant",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "New value of the constant",
                        "name": "newValue",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error in updating constants",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/login": {
            "post": {
                "description": "Admin Login",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Admin Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the admin",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password of the admin",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error in updating constants",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/update_leaderboard": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update Leaderboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update Leaderboard",
                "responses": {
                    "200": {
                        "description": "Updated Successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error in updating constants",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/verify": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks if the admin is logged in",
                "tags": [
                    "Admin"
                ],
                "summary": "Admin Verify",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/characters": {
            "get": {
                "description": "Get all Characters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get all Characters",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.GetCharactersResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/error": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Log Client Side Error",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Log Client Side Error",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client Side Error message",
                        "name": "message",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/leaderboard/{page}": {
            "get": {
                "description": "Get Leaderboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get Leaderboard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.GetLeaderboardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/lootbox": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all lootboxes of the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get Lootboxes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.LootboxGETResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/lootbox/open": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Open a lootbox",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Open Lootbox",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player's Tile X coordinate",
                        "name": "x",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Player's Tile Y coordinate",
                        "name": "y",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Lootbox ID",
                        "name": "lootboxID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.LootboxOpenPOSTResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Minicon Limit Reached",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Lootbox already opened",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "418": {
                        "description": "LOL, Nice Try",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/match/history": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get History of Matches",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Match"
                ],
                "summary": "Get History of Matches",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.MatchDetailsResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/match/start": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Start a Match",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Match"
                ],
                "summary": "Start a Match",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.StartMatchResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Daily Attack Limit Reached (OR) Lineup not set (OR) Arena closed",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/minicon": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get All Minicons",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Minicon"
                ],
                "summary": "Get All Minicons",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.GetMiniconsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/minicon/:id": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get details of a minicon",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Minicon"
                ],
                "summary": "Get Minicon Details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Minicon Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.GetMiniconResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not Owned or Doesn't Exist",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/minicon/updateLineup": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update Minicon Lineup",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Minicon"
                ],
                "summary": "Update Minicon Lineup",
                "parameters": [
                    {
                        "description": "Lineup ID Array",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateLineupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateLineupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets user profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile/update": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates user profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "enum": [
                            "name",
                            "college",
                            "contact",
                            "character"
                        ],
                        "type": "string",
                        "description": "Intended update",
                        "name": "intendedUpdate",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New value",
                        "name": "newValue",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request or Invalid intended update",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.Character": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.ConstantsResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/model.ConstantType"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "controller.GetCharactersResponse": {
            "type": "object",
            "properties": {
                "characters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.Character"
                    }
                }
            }
        },
        "controller.GetLeaderboardResponse": {
            "type": "object",
            "properties": {
                "leaderboard": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.LeaderboardRow"
                    }
                },
                "pages": {
                    "type": "integer"
                }
            }
        },
        "controller.GetMiniconResponse": {
            "type": "object",
            "properties": {
                "attack": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "health": {
                    "type": "integer"
                },
                "imgLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "perks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.PerkData"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "controller.GetMiniconsResponse": {
            "type": "object",
            "properties": {
                "lineup": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.UnlockedMiniconsResponse"
                    }
                },
                "locked": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.LockedMiniconsResponse"
                    }
                },
                "unlocked": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.UnlockedMiniconsResponse"
                    }
                }
            }
        },
        "controller.LeaderboardRow": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer"
                },
                "trophies": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "xp": {
                    "type": "integer"
                }
            }
        },
        "controller.LockedMiniconsResponse": {
            "type": "object",
            "properties": {
                "miniconID": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.Lootbox": {
            "type": "object",
            "properties": {
                "isOpen": {
                    "description": "Is the lootbox open?",
                    "type": "boolean"
                },
                "lootboxID": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "x": {
                    "description": "Encrypted X coordinate of the lootbox",
                    "type": "string"
                },
                "y": {
                    "description": "Encrypted Y coordinate of the lootbox",
                    "type": "string"
                }
            }
        },
        "controller.LootboxGETResponse": {
            "type": "object",
            "properties": {
                "lootboxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.Lootbox"
                    }
                }
            }
        },
        "controller.LootboxOpenPOSTResponse": {
            "type": "object",
            "properties": {
                "lootboxID": {
                    "type": "integer"
                },
                "unlocked": {
                    "$ref": "#/definitions/controller.Unlocked"
                }
            }
        },
        "controller.MatchDetailsResponse": {
            "type": "object",
            "properties": {
                "matchID": {
                    "type": "integer"
                },
                "matchType": {
                    "type": "string"
                },
                "opponentAvatarURL": {
                    "type": "string"
                },
                "opponentUsername": {
                    "description": "Attacker Details",
                    "type": "string"
                },
                "trophyChange": {
                    "type": "integer"
                }
            }
        },
        "controller.OpponentDetails": {
            "type": "object",
            "properties": {
                "characterURL": {
                    "type": "string"
                },
                "trophies": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "xp": {
                    "type": "integer"
                }
            }
        },
        "controller.PerkData": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "perkValue": {
                    "type": "integer"
                }
            }
        },
        "controller.StartMatchResponse": {
            "type": "object",
            "properties": {
                "matchId": {
                    "type": "integer"
                },
                "opponent": {
                    "$ref": "#/definitions/controller.OpponentDetails"
                }
            }
        },
        "controller.Unlocked": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.UnlockedMiniconsResponse": {
            "type": "object",
            "properties": {
                "imageLink": {
                    "type": "string"
                },
                "miniconID": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "ownedMiniconID": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "xp": {
                    "type": "integer"
                }
            }
        },
        "controller.UpdateLineupRequest": {
            "type": "object",
            "required": [
                "lineupIDArr"
            ],
            "properties": {
                "lineupIDArr": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "controller.UpdateLineupResponse": {
            "type": "object",
            "properties": {
                "miniconID": {
                    "type": "integer"
                }
            }
        },
        "controller.UpdateProfileResponse": {
            "type": "object",
            "properties": {
                "intendedUpdate": {
                    "type": "string"
                },
                "newValue": {
                    "type": "string"
                }
            }
        },
        "helper.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.ConstantType": {
            "type": "string",
            "enum": [
                "minicons_in_lineup",
                "matchmaking_rank_range",
                "min_trophy_gain",
                "trophy_gain_range",
                "trophy_diff_loser",
                "survivor_trophy_range",
                "default_trophy_count",
                "successive_duplicate_match_limit",
                "daily_attack_limit",
                "incr_xp_minicon",
                "incr_xp_user",
                "xp_level_multiplier",
                "xp_base_count",
                "level_up_stat_multiplier_numerator",
                "level_up_stat_multiplier_denominator",
                "is_arena_open",
                "max_minicon_level",
                "max_unlocked_minicons",
                "type_multiplier_numerator",
                "type_multiplier_denominator"
            ],
            "x-enum-varnames": [
                "MiniconsInLineup",
                "MatchmakingRankRange",
                "MinTrophyGain",
                "TrophyGainRange",
                "TrophyDiffLoser",
                "SurvivorTrophyRange",
                "DefaultTrophyCount",
                "SuccessiveDuplicateMatchLimit",
                "DailyAttackLimit",
                "IncrXpMinicon",
                "IncrXpUser",
                "XpLevelMultiplier",
                "XpBaseCount",
                "LevelUpStatMultiplierNumerator",
                "LevelUpStatMultiplierDenominator",
                "IsArenaOpen",
                "MaxMiniconLevel",
                "MaxUnlockedMinicons",
                "TypeMultiplierNumerator",
                "TypeMultiplierDenominator"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Authorization token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}